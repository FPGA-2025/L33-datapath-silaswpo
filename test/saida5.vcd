$date
	Fri Jul 25 22:55:14 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb $end
$var reg 1 ! clk $end
$var reg 8 " counter [7:0] $end
$var reg 32 # expected_result [31:0] $end
$var reg 1 $ rst_n $end
$scope module t $end
$var wire 1 ! clk $end
$var wire 1 $ rst_n $end
$var wire 1 % wr_en $end
$var wire 1 & rd_en $end
$var wire 32 ' data_out [31:0] $end
$var wire 32 ( data_in [31:0] $end
$var wire 32 ) addr [31:0] $end
$var parameter 96 * MEMORY_FILE $end
$scope module core $end
$var wire 1 ! clk $end
$var wire 1 $ rst_n $end
$var wire 32 + u_imm_ext [31:0] $end
$var wire 5 , rt [4:0] $end
$var wire 5 - rs [4:0] $end
$var wire 5 . rd [4:0] $end
$var wire 6 / opcode [5:0] $end
$var wire 26 0 jump_imm [25:0] $end
$var wire 32 1 j_imm_ext [31:0] $end
$var wire 32 2 imm_ext [31:0] $end
$var wire 16 3 imm [15:0] $end
$var wire 32 4 data_i [31:0] $end
$var parameter 32 5 BOOT_ADDRESS $end
$var parameter 3 6 DECODE $end
$var parameter 3 7 EXEC $end
$var parameter 3 8 FETCH $end
$var parameter 3 9 MEM_ACCESS $end
$var parameter 3 : MEM_WAIT $end
$var parameter 3 ; WRITEBACK $end
$var reg 32 < addr_o [31:0] $end
$var reg 32 = alu_out [31:0] $end
$var reg 32 > data_o [31:0] $end
$var reg 32 ? ir [31:0] $end
$var reg 32 @ pc [31:0] $end
$var reg 1 & rd_en_o $end
$var reg 3 A state [2:0] $end
$var reg 1 % wr_en_i $end
$upscope $end
$scope module mem $end
$var wire 1 B ack_o $end
$var wire 32 C addr_i [31:0] $end
$var wire 1 ! clk $end
$var wire 32 D data_i [31:0] $end
$var wire 1 & rd_en_i $end
$var wire 1 % wr_en_i $end
$var wire 32 E data_o [31:0] $end
$var parameter 96 F MEMORY_FILE $end
$var parameter 32 G MEMORY_SIZE $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000000000000 G
b11100000111001001101111011001110111001001100001011011010110000100101110011101000111100001110100 F
b101 ;
b100 :
b11 9
b0 8
b10 7
b1 6
b0 5
b11100000111001001101111011001110111001001100001011011010110000100101110011101000111100001110100 *
$end
#0
$dumpvars
bz E
bx D
bx C
1B
b0 A
b0 @
bx ?
bx >
bx =
bx <
bz 4
bx 3
bx 2
bx00 1
bx 0
bx /
bx .
bx -
bx ,
bx0000000000000000 +
bx )
bz (
bx '
0&
0%
0$
b1000000000000 #
b0 "
0!
$end
#1000
1!
#2000
0!
#3000
1!
#4000
0!
#5000
b1001010110111 (
b1001010110111 4
b1001010110111 E
b1 A
1&
b0 )
b0 <
b0 C
b1 "
1!
1$
#6000
0!
#7000
b100101011011100 1
b0 /
b0 -
b0 ,
b10 .
b1001010110111 2
b10010101101110000000000000000 +
b1001010110111 3
b1001010110111 0
bz (
bz 4
bz E
b10 A
b100 @
b1001010110111 ?
0&
b10 "
1!
#8000
0!
#9000
b101 A
b11 "
1!
#10000
0!
#11000
b0 A
b100 "
1!
#12000
0!
#13000
b10100000010100000100011 (
b10100000010100000100011 4
b10100000010100000100011 E
b1 A
1&
b100 )
b100 <
b100 C
b101 "
1!
#14000
0!
#15000
b1010000001010000010001100 1
b10 -
b10000 ,
b101 .
b10100000100011 2
b101000001000110000000000000000 +
b10100000100011 3
b10100000010100000100011 0
bz (
bz 4
bz E
b10 A
b1000 @
b10100000010100000100011 ?
0&
b110 "
1!
#16000
0!
#17000
b101 A
b111 "
1!
#18000
0!
#19000
b0 A
b1000 "
1!
#20000
0!
#21000
b10011 (
b10011 4
b10011 E
b1 A
1&
b1000 )
b1000 <
b1000 C
b1001 "
1!
#22000
0!
#23000
b1001100 1
b0 -
b0 ,
b0 .
b10011 2
b100110000000000000000 +
b10011 3
b10011 0
bz (
bz 4
bz E
b10 A
b1100 @
b10011 ?
0&
b1010 "
1!
#24000
0!
#25000
b101 A
b1011 "
1!
#26000
0!
#27000
b0 A
b1100 "
1!
#28000
0!
#29000
bx (
bx 4
bx E
b1 A
1&
b1100 )
b1100 <
b1100 C
b1101 "
1!
#30000
0!
#31000
bx00 1
bx /
bx -
bx ,
bx .
bx 2
bx0000000000000000 +
bx 3
bx 0
bz (
bz 4
bz E
b10 A
b10000 @
bx ?
0&
1!
#32000
0!
#33000
b0 A
1!
